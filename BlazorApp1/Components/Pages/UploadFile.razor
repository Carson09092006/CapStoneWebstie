@page "/UploadFile"
@rendermode InteractiveServer

<PageTitle>Blazor Server File Upload</PageTitle>

<h1>Blazor Server File Upload</h1>

<div style="margin-bottom: 20px; display: flex;">
    <div>Select your file:</div>
    <InputFile OnChange="FileUploaded" />
</div>

<h2>Selected file</h2>
<div>
    <div>File name: @FileName</div>
    <div>File size: @FileSize.ToString("n0") bytes</div>
    <div>File type: @FileType</div>
    <div>Last modified: @LastModified</div>
</div>


<div>
    <table class="table">
        <thead>
            <tr>
                <th>Reader</th>
                <th>count</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var kvp in dict)
            {
                <tr>
                    <td>@kvp.Key</td>
                    <td>@kvp.Value.Count</td>
                    
                </tr>
            }
        </tbody>
    </table>
</div>
@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div>Error: @ErrorMessage</div>
}
@code{
    public string FileName { get; set; } = "";
    public long FileSize { get; set; }
    public string FileType { get; set; } = "";
    public DateTimeOffset LastModified { get; set; }
    public string ErrorMessage { get; set; } = "";
    
    List<ReaderEvent> readerlist = new List<ReaderEvent>();
    
    const int MAX_FILESIZE = 5000 * 1024; // 2 MB
    private Dictionary<string, List<ReaderEvent>> dict = new Dictionary<string, List<ReaderEvent>>(); 

    
    public async Task FileUploaded(InputFileChangeEventArgs e)
    {
       
        var browserFile = e.File;

        if (browserFile != null)
        {
            FileSize = browserFile.Size;
            FileType = browserFile.ContentType;
            FileName = browserFile.Name;
            LastModified = browserFile.LastModified;

            try
            {
                var fileStream = browserFile.OpenReadStream(MAX_FILESIZE);

                @* var randomFile = Path.GetTempFileName();
                var extension = Path.GetExtension(browserFile.Name);
                var targetFilePath = Path.ChangeExtension(randomFile, extension); *@
                var targetFilePath = FileName;
                var destinationStream = new FileStream(targetFilePath, FileMode.Create);
                await fileStream.CopyToAsync(destinationStream);
                destinationStream.Close();
                loadData(FileName);
            }
            catch (Exception exception)
            {
                ErrorMessage = exception.Message;
            }
        }
    }

    public void loadData(string name)
    {
         try
            {
                
                string line;
                StreamReader sr = new StreamReader(name);
                line = sr.ReadLine();
                while(line != null)
                {
                    ReaderEvent re = new ReaderEvent(line);
                    readerlist.Add(re);
                    line = sr.ReadLine();
                }
                sr.Close();

                AddToDict(readerlist);
            }
            catch
            {

            }


    }
    public void AddToDict(List<ReaderEvent> reader)
    {
        foreach(ReaderEvent Revent in reader)
        {
            if(dict.ContainsKey(Revent.ID()))
            {
                List<ReaderEvent> r3 = dict[Revent.ID()];
                r3.Add(Revent);

            }
            else
            {
                List<ReaderEvent> r2 = new List<ReaderEvent>();
                    r2.Add(Revent);
                dict.Add(Revent.ID(), r2);
            }
        }
    }
    public class ReaderEvent
    {
        public string Date {get; set; } = "";
        public string FacilityLocation {get; set; } = "";
        public string IDHASH {get; set; } = "";
        public string DEVID {get; set; }
        public string MACHINE {get; set; }


        public ReaderEvent(string line)                 
        {
        string[] words = line.Split(',');
        Date = words[0];
        FacilityLocation = words[2];
        IDHASH = words[3];
        DEVID = words[4];
        MACHINE = words[5];
        }

        public string ID()
        {
            string uniqueID;
            uniqueID = DEVID + MACHINE;
            return uniqueID;

        }
           
    }
}